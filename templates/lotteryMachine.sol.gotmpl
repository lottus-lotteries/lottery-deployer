{{$engine := . -}}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract {{$engine.ContractName}} is ERC721, Ownable {
    address public contractOwner;
    uint256 public totalTokensMinted;
    uint256 public closingTime;
    bool public hasMintedAll = false;

    constructor((uint256 daysUntilClosing)) ERC721("{{ $engine.LotteryName }}", "{{ $engine.Abbr }}") {
        require(daysUntilClosing > 0, "Closing time must be in the future");
        contractOwner = msg.sender;
        closingTime = block.timestamp + (daysUntilClosing * 1 days);
    }

    function transfer(address recipient, uint256 tokenId) public{
        require(block.timestamp < closingTime, "Lottery has already closed");
        require(_exists(tokenId), "ERC721: token does not exist");
        _transfer(msg.sender, recipient, tokenId);
    }

    function mintAll(uint256 numberOfTokens) public{
        require(block.timestamp < closingTime, "Lottery has already closed");
        require(!hasMintedAll, "MintAll can only be called once");

        for (uint256 i = 0; i < numberOfTokens; i++) {
            totalTokensMinted++;
            _safeMint(contractOwner, totalTokensMinted);
        }

        hasMintedAll = true;
    }
}
