{{$engine := . -}}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract {{$engine.ContractName}} is ERC721, Ownable {
    constructor() ERC721("{{ $engine.LotteryName }}", "{{ $engine.Abbr }}") {}

    uint256 public totalTokensMinted;

    function mintAll(uint256 numberOfTokens) public onlyOwner {
        for (uint256 i = 0; i < numberOfTokens; i++) {
            totalTokensMinted++;
            _safeMint(msg.sender, totalTokensMinted);
        }
    }

    function transfer(address to, uint256 tokenId) public onlyOwner {
        require(_exists(tokenId), "ERC721: token does not exist");
        require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");
        _transfer(_msgSender(), to, tokenId);
    }
}
